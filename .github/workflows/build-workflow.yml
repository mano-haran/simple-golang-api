# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build and Push Go Web Service

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/simple-golang-api
  
jobs:

  build:
    runs-on: ubuntu-latest
    permissions:
      security-events: write   # Required for GitHub code scanning alerts
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]  # Add other languages if needed
        
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      id: analyze
      uses: github/codeql-action/analyze@v3
      with:
        output: results.sarif

    - name: Fail if high severity issues exist
      run: |
        set -e
        files=$(find results.sarif -type f -name '*.sarif')
        total=0
        for f in "$files"; do
          echo "File: $f"
          count=$(jq '[.runs[].results[] | select(.level=="error")] | length' "$f")
          echo "File: $f -> Error issue count: $count"
          total=$((total + count))
        done
        echo "Total high severity issues: $total"
        if [ "$total" -gt 0 ]; then
          echo "CodeQL detected high severity issues. Failing build."
          exit 1
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get latest version tag
      id: get_version
      run: |
        git fetch --tags
        latest=$(git tag --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
        echo "Latest tag: $latest"
        if [[ -z "$latest" ]]; then
          echo "version=0.0.1" >> $GITHUB_OUTPUT
        else
          IFS='.' read -r major minor patch <<< "${latest}"
          patch=$((patch + 1))
          echo "version=$major.$minor.$patch" >> $GITHUB_OUTPUT
        fi
        
    - name: Build Docker image
      run: docker build -t "${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}" -t "${{ env.IMAGE_NAME }}:latest" .

    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: "${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}"
        severity: 'CRITICAL,HIGH'
        format: 'table'

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image
      run: |
        docker push "${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}"
        docker push "${{ env.IMAGE_NAME }}:latest"

 #   - name: Build and push Docker image
 #     uses: docker/build-push-action@v5
 #     with:
 #       context: .
 #       file: ./Dockerfile
 #       platforms: linux/amd64
 #       push: true
 #       tags: |
 #           ${{ env.IMAGE_NAME }}:latest
 #           ${{ env.IMAGE_NAME }}:${{ github.sha }}
 #           ${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}
        
